<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cao.score.dao.ScoresDao">

    <resultMap type="com.cao.score.entity.Scores" id="ScoresMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="studentId" column="student_id" jdbcType="VARCHAR"/>
        <result property="score" column="score" jdbcType="NUMERIC"/>
        <result property="subject" column="subject" jdbcType="INTEGER"/>
        <result property="qualifiedState" column="qualified_state" jdbcType="INTEGER"/>
        <result property="scoreNum" column="score_num" jdbcType="VARCHAR"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="ScoresMap">
        select
          id, student_id, score, subject, qualified_state
        from score.scores
        where id = #{id}
    </select>


    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="ScoresMap">
        select
          id, student_id, score, subject, qualified_state
        from score.scores
        limit #{offset}, #{limit}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="ScoresMap">
        select
        id, student_id, score, subject, qualified_state
        from score.scores
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="studentId != null and studentId != ''">
                and student_id = #{studentId}
            </if>
            <if test="score != null">
                and score = #{score}
            </if>
            <if test="subject != null">
                and subject = #{subject}
            </if>
            <if test="qualifiedState != null">
                and qualified_state = #{qualifiedState}
            </if>
        </where>
    </select>

    <select id="getScoresInfoDatas" parameterType="com.cao.score.vo.ObjectParams" resultType="com.cao.score.vo.ScoreParams">
        SELECT
        stu.grade_num gradeNum,
        stu.class_num classNum,
        stu.student_id studentId,
        stu.name name,
        (	SELECT s.score FROM	scores s 	WHERE	s.`subject` = 1 AND s.student_id = stu.student_id
        <if test="scoreNum != null and scoreNum != ''">
            and s.score_num = #{scoreNum}
        </if>
         LIMIT 1 ) chineseScore,
        (	SELECT s.score FROM	scores s 	WHERE	s.`subject` = 2 AND s.student_id = stu.student_id
        <if test="scoreNum != null and scoreNum != ''">
            and s.score_num = #{scoreNum}
        </if>
        LIMIT 1 ) mathScore,
        (	SELECT s.score FROM	scores s 	WHERE	s.`subject` = 3 AND s.student_id = stu.student_id
        <if test="scoreNum != null and scoreNum != ''">
            and s.score_num = #{scoreNum}
        </if>
        LIMIT 1 ) englishScore,
        (	SELECT s.score FROM	scores s 	WHERE	s.`subject` = 4 AND s.student_id = stu.student_id
        <if test="scoreNum != null and scoreNum != ''">
            and s.score_num = #{scoreNum}
        </if>
        LIMIT 1 ) politicsScore,
        (	SELECT s.score FROM	scores s 	WHERE	s.`subject` = 5 AND s.student_id = stu.student_id
        <if test="scoreNum != null and scoreNum != ''">
            and s.score_num = #{scoreNum}
        </if>
        LIMIT 1 ) historyScore,
        (	SELECT s.score FROM	scores s 	WHERE	s.`subject` = 6 AND s.student_id = stu.student_id
        <if test="scoreNum != null and scoreNum != ''">
            and s.score_num = #{scoreNum}
        </if>
        LIMIT 1 ) geographyScore,
        (	SELECT s.score FROM	scores s 	WHERE	s.`subject` = 7 AND s.student_id = stu.student_id
        <if test="scoreNum != null and scoreNum != ''">
            and s.score_num = #{scoreNum}
        </if>
        LIMIT 1 ) biologicalScore,
        (	SELECT s.score FROM	scores s 	WHERE	s.`subject` = 8 AND s.student_id = stu.student_id
        <if test="scoreNum != null and scoreNum != ''">
            and s.score_num = #{scoreNum}
        </if>
        LIMIT 1 ) physicalScore,
        (	SELECT s.score FROM	scores s 	WHERE	s.`subject` = 9 AND s.student_id = stu.student_id
        <if test="scoreNum != null and scoreNum != ''">
            and s.score_num = #{scoreNum}
        </if>
        LIMIT 1 ) chemicalScore
        FROM
        students stu
        <where>
            <if test="keyword != null and keyword != ''">
                and (stu.identity_num LIKE CONCAT(CONCAT('%', #{keyword}), '%')
                or stu.student_id LIKE CONCAT(CONCAT('%', #{keyword}), '%')
                or stu. name LIKE CONCAT(CONCAT('%', #{keyword}), '%')
                )
            </if>
            <if test="scoreNum != null and scoreNum != ''">
                and stu.student_id in ( SELECT student_id FROM scores WHERE score_num = #{scoreNum} GROUP BY student_id)
            </if>
            <if test="studentId != null and studentId != ''">
                and stu.student_id = #{studentId}
            </if>

            <if test="gradeNum != null">
                and stu.grade_num = #{gradeNum}
            </if>
            <if test="classNum != null">
                and stu.class_num = #{classNum}
            </if>
        </where>
    </select>
    <!--通过实体作为筛选条件查询-->
    <select id="queryOneByScoreParams" resultMap="ScoresMap">
        select
        id, student_id, score, subject, qualified_state
        from score.scores
        <where>
            <if test="studentId != null and studentId != ''">
                and student_id = #{studentId}
            </if>
            <if test="subject != null">
                and subject = #{subject}
            </if>
        </where>
    </select>
    <!--通过实体作为筛选条件查询-->
    <select id="getAllScoresNum" resultMap="ScoresMap">
        select
            score_num
        from score.scores where length(score_num) >0
        group by score_num
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into score.scores(student_id, score, subject, qualified_state,score_num)
        values (#{studentId}, #{score}, #{subject}, #{qualifiedState}, #{scoreNum})
    </insert>

    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into score.scores(student_id, score, subject, qualified_state)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.studentId}, #{entity.score}, #{entity.subject}, #{entity.qualifiedState})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into score.scores(student_id, score, subject, qualified_state)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.studentId}, #{entity.score}, #{entity.subject}, #{entity.qualifiedState})
        </foreach>
        on duplicate key update
        student_id = values(student_id) , score = values(score) , subject = values(subject) , qualified_state =
        values(qualified_state)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update score.scores
        <set>
            <if test="studentId != null and studentId != ''">
                student_id = #{studentId},
            </if>
            <if test="score != null">
                score = #{score},
            </if>
            <if test="subject != null">
                subject = #{subject},
            </if>
            <if test="qualifiedState != null">
                qualified_state = #{qualifiedState},
            </if>
            <if test="scoreNum != null and scoreNum != ''">
                score_num = #{scoreNum},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from score.scores where id = #{id}
    </delete>
    <!--通过主键删除-->
    <delete id="deleteByStudentId">
        delete from score.scores where student_id = #{studentId}
    </delete>

</mapper>